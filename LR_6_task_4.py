# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hqyJl494SYonzXZimve5QO_pGPMS_5kT
"""



# Імпортуємо потрібні бібліотеки
import numpy as np
import neurolab as nl

# Вхідні дані для мережі
target =  [[1,0,0,0,1,
           1,1,0,0,1,
           1,0,1,0,1,
           1,0,0,1,1,
           1,0,0,0,1],
          [1,1,1,1,1,
           1,0,0,0,0,
           1,1,1,1,1,
           1,0,0,0,0,
           1,1,1,1,1],
          [1,1,1,1,0,
           1,0,0,0,1,
           1,1,1,1,0,
           1,0,0,1,0,
           1,0,0,0,1],
          [0,1,1,1,0,
           1,0,0,0,1,
           1,0,0,0,1,
           1,0,0,0,1,
           0,1,1,1,0]]

chars = ['N', 'E', 'R', 'O']

# Перетворення 0 на -1
target = np.asfarray(target)
target[target == 0] = -1

# Створення та навчання мережі Хопфілда
net = nl.net.newhop(target)

# Перевірка на тренувальних зразках
output = net.sim(target)
print("Test on train samples:")
for i in range(len(target)):
    print(chars[i], (output[i] == target[i]).all())

# Тестування з дефектами на букві N
print("\nTest on defaced N:")
test_n = np.asfarray([0,0,0,0,0,
                      1,1,0,0,1,
                      1,1,0,0,1,
                      1,0,1,1,1,
                      0,0,0,1,1])
test_n[test_n == 0] = -1
out_n = net.sim([test_n])
print((out_n[0] == target[0]).all(), 'Sim. steps', len(net.layers[0].outs))

# Тестування з дефектами на букві E
print("\nTest on defaced E:")
test_e = np.asfarray([1,1,1,1,1,
                      1,0,0,0,0,
                      1,1,1,1,1,
                      1,0,0,0,0,
                      1,1,1,1,1])
test_e[test_e == 0] = -1
out_e = net.sim([test_e])
print((out_e[0] == target[1]).all(), 'Sim. steps', len(net.layers[0].outs))

# Тестування з дефектами на букві R
print("\nTest on defaced R:")
test_r = np.asfarray([1,1,1,1,0,
                      1,0,0,0,1,
                      1,1,1,1,0,
                      1,0,0,1,0,
                      1,0,0,0,1])
test_r[test_r == 0] = -1
out_r = net.sim([test_r])
print((out_r[0] == target[2]).all(), 'Sim. steps', len(net.layers[0].outs))

# Тестування з дефектами на букві O
print("\nTest on defaced O:")
test_o = np.asfarray([0,1,1,1,0,
                      1,0,0,0,1,
                      1,0,0,0,1,
                      1,0,0,0,1,
                      0,1,1,1,0])
test_o[test_o == 0] = -1
out_o = net.sim([test_o])
print((out_o[0] == target[3]).all(), 'Sim. steps', len(net.layers[0].outs))